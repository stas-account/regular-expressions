<?php
error_reporting(-1);
ini_set('display_errors','on');
header('Content-Type: text/html; charset=utf-8');

/**
 *	Задачник. После каждого $array мы ОБЯЗАНЫ написать прям тут нужный нам код. Прогнать массив $array через foreach и обработать по заданию из $q.
 *	$q - массивы, то есть могут содержать несколько заданий, каждый из которых будет работать с имеющимся массивом
 *	Если у нас в задаче замена, то мы производим замену и выводим: $text = preg_replace('что','на что',$text),
 *	Если у нас в задаче поиск, то производим проверку через if-else и выводим: строку 
 *	echo 'В такой-то строке: '.htmlspecialchars($array[$k]).' регулярка прошла УСПЕШНО или НЕ УСПЕШНО (подставить в if-else)';
 *	и если у нас поиск, то дополнительно вывести весь массив $matches, И нужную найденную строку, если нам надо её получить echo $matches[0][1] <- пример
 *  Задачки подготовил Inpost специально для курсов. Дата: 5 января 2012 года
 *	skype: imbalance_hero , пишите :)
 */

/**
 *	Подсказки:
 *	^ - начало строки, если указали, то проверка идёт от начала!
 *	$ - конец строки
 *	\s - пробел
 *	\t - табуляция
 *	* - {0,}
 *	+ - {1,}
 *	. - любой символ!
 *	Модификаторы:
 *	u - работаем в кодировке UTF-8
 *	i - регистронезависимый текст
 *	U - отмена жадного поиска
 *	Общие данные:
 *	[] - область допустимых символов в КОНКРЕТНОМ символе. [a-z]{3} <- 3 символа любых из a-z, вплоть даже до 3-х повторяющихся
 *	{} - количество символов, если не стоит, значит 1 символ! Если записано одно число, то РОВНОЕ значение, если 2, то min,max
 *	() - логические скобки И/ИЛИ карман, куда попадают данные
 */


$array = [
    'Ваш логин: Inpost. Добро пожаловать',
    'Ваш логин: Николай. Добро пожаловать',
    'Ваш логин: Анна Семинович. Добро пожаловать',
    'Ваш логин: Борис_Бурда-2. Добро пожаловать',
];
$q = 'Поиском достать логин. 
      Особенности: логин стоит после двухиточия, может представлять из себя рус и англ символы, пробелы, тире и подчеркивание. 
	  Для для того, чтобы достать чистый логин, воспользуемся карманом (скобками)';


$array = [
    'main',
    'READ',
    'news"&\\/files',
	'../../index',
	'news',
	'kill_crash-and-destroy',
	'loveYou',
];
$q = 'Проверить допустимые имена файлов
      Важно заметить, что мы в юникс-системе будем использовать как большие, так и маленькие символы.
	  Необходимо недопустить попадания ТОЛЬКО запрещенных файловой системой имён, а так же попытки перейти между каталогами';


$array = [
	'file.jpg',
	'zzz.png',
	'afafaf.php',
	'quad.jpg.',
	'quad2.JPG',
	'quad3.jpg.vir',
	'gif.doc',
	'file.virus',
];
$q = 'Загрузка фотографий. Необходимо допустить ТОЛЬКО: jpg,png,gif расширения
	  Важной особенностью будет то, что поиск лучше осуществлять с конца строки $ .
	  Интересный момент, что можно попасться на ошибку Попова :)';


$array = [
	'Длинная строка. Главное, что мы научимся с ней идеально работать.  HOW do you do? Вот так и живём.Классно!',
];
$q = [
	'Одна строка, заданий много:',
	'Получить все слова. Самая простая регулярка, поиск по всей строке, указать надо лишь допустимые символы и количество',
	'Получить все английские слова.',
	'Получить слова, которые стоят после точки. Обращаю внимание, что пробел после точки может БЫТЬ и даже не один, а может и не быть, символ пробела: \s',
	'Необходимо получить 5 символ от начала строки. Начало строки: ^ , и не забудем использовать кармашек, чтобы туда ушел нужный нам символ',
	'Получить все слова, в которых первым символ будет начинаться с большой буквы. Подсказка, необходимо использовать 2 квадратных скобки!',
];


$array = [
	'10 , 22, 2.1, 2.5, 10.10, 500.1, 77, 10.11.12.13',
];
$q = [
	'Достать ВСЕ дробные числа. Дробные - это числа, разделенные точкой',
];


$array = [
	'site.ru',
	'barakuda',
	'zimbabwe_ru',
	'zimbabwe',
	'zzz-zimbabwe',
	'http://site.ru',
	'www.site.com',
	'www.zimbabwe.com',
	'zimbabwe.com.ua',
	'http://zimbabwe.ru',
];
$q = [
	'Получить ссылки на реальные сайты (обязательно доменное имя), где имя сайта zimbabwe',
	'Немного сложная работа со строкой. Осуществить проверку каждого слова на присутствие в начале http://, и там, где его нет - дописать.
	 Для этих целей используем обход цикла foreach, и проверку preg_match. Не забываем про экранизацию при помощи preg_quote',
	'Похожее задание, но для сайтов, где не указано доменное имя - дописать .ru, это продолжение предыдущего задания, делается так же само, в одном цикле, просто 2 отдельных условия!',
];



$array = [
	'inpost',
	'Barabulka_ru',
	'Zimbabwe.ru',
	'Max',
	'Yojik',
	'Иван Тарасов',
	'Ёжик',
	'Борис Николаевич Кощуновский',
	'Ооооооооооооооооооооочень длинное имя',
	'Я',
	'go->drink->die',
	'Don`t sleep',
	'<Пивасик',
	'1',
	'123456789',
	'77777',
	'7ф777я7',
];
$q = [
	'Теперь идут операции по работе с логинами и паролями. Очень важно именно при РЕГИСТРАЦИИ:',
	'Проверка на preg_match, разрешить только числам. Подсказка: числа точно так же как и буквы, а именно 0-9 (а-я)',
	'Пропустить только строки, состоящие из цифр 7 и символов ф,я',
	'Пропустить только рус и англ символы, подчеркивание и тире, пробел(!) длиной от 4 до 15 символов',
	'Выбрать логин, который начинается на M и заканчивается на x , я говорю про Max',
];



$array = [
	'Я тебя ооооочеень            СИЛЬНО            ЛЮБЛЮ          МОЙ                    ДругБорис! Цёми-Цёми,    Пративный!',
];
$q = [
	'Вчера писал для себя. Заменить подряд идущие пробелы на один. Чтобы не было их так много. preg_replace',
];



$array = [
	'Дата публикации:27 августа 08:43. Был отличный год!',
];
$q = [
	'Строку мы знаем, меняется лишь день,месяц,время. Необходимо достать:',
	'Время, когда опубликовали',
	'Полностью дату, а именно (27 августа 08:43), она может меняться!',
];



$array = [
	'<a href="file.php">Это ссылка, и тут было классно</a>',
	'<a    href     =       "file.php"     >Это ссылка, и тут было классно</a>',
	'<a    href=file.php >Это ссылка, и тут было классно</a>',
	"<a    href='file.php' >Это ссылка, и тут было классно</a>",
];
$q = [
	'Используем карманы, необходимо получить путь, куда ссылается и текст внутри тега!
	 Стоит обратить внимание на момент, где символ МОЖЕТ БЫТЬ, а может и не БЫТЬ',
];



$array = [
	'text@',
	'yandex@@mega.com',
	'beer@mail.com',
	"inpost.dp.ua",
	"inpostdpua@gmail.com",
];
$q = [
	'Проверить на валидность е-мейла. Краткая информация (ВАЖНАЯ!), емеил состоит из набора символов маленьких. 
	 Присутствует в центре собака, слева имя ящика, которое может состоять из обычных символов англ И подчеркивания И тире.
	 Справа находятся домены, отделенные точками.',
];


/*
$array = [
	'Ваш логин: Inpost. Добро пожаловать',
	'Ваш логин: Николай. Добро пожаловать',
	'Ваш логин: Анна Семинович. Добро пожаловать',
	'Ваш логин: Борис_Бурда-2. Добро пожаловать',
];

foreach($array as $v) {
	$res = preg_match('#:\s([\w\s-]*)#u', $v, $matches);
	if($res) {
		echo 'true';
	} else {
		echo 'false';
	}
	echo '<pre>'.print_r($matches,1).'</pre>';
}

$array = [
	'main',
	'READ',
	'news"&\\/files',
	'../../index',
	'news',
	'kill_crash-and-destroy',
	'loveYou',
];

foreach($array as $v) {
	$res = preg_match('#^[a-z-]+$#ui', $v, $matches);
	if($res) {
		echo 'true';
	} else {
		echo 'false';
	}
	echo '<pre>'.print_r($matches,1).'</pre>';
}

$array = [
	'file.jpg',
	'zzz.png',
	'afafaf.php',
	'quad.jpg.',
	'quad2.JPG',
	'quad3.jpg.vir',
	'gif.sdfsd',
	'file.virus',
];

foreach($array as $v) {
	$res = preg_match('#[a-z-]+\.(gif|png|jpg)$#u', $v, $matches);
	if($res) {
		echo 'true';
	} else {
		echo 'false';
	}
	echo '<pre>'.print_r($matches,1).'</pre>';
}

$array = [
	'Длинная строка. Главное, что мы научимся с ней идеально работать.  HOW do you do? Вот так и живём.Классно!',
];

'#\w{2,}#ui'
'#[a-z]{2,}#ui'
'#\.[\w\s]*#ui'
'#^(.{5})#ui'
'#[A-ZА-Я][\w]*#u'

$array = [
	'10 , 22, 2.1, 2.5, 10.10, 500.1, 77, 10.11.12.13',
];

foreach($array as $v) {
	$res = preg_match_all('#[^\.]\d+\.\d+[^\.]#u', $v, $matches);
	if($res) {
		echo 'true';
	} else {
		echo 'false';
	}
	echo '<pre>'.print_r($matches,1).'</pre>';
}

foreach($array as &$v) {
	$res = preg_match('#.*http://#u', $v, $matches);
	if($res) {
		echo 'true';
	} else {
		$v = 'http://'.$v;
		echo 'false';
	}
	$res1 = preg_match('#[^\s_]+(\.ru|\.com|\.ua)$#u', $v, $matches);
	if($res1) {
		echo 'true';
	} else {
		$v = $v.'.ru';
		echo 'false';
	}
	echo '<pre>'.print_r($matches,1).'</pre>';
}

echo '<pre>'.print_r($array,1).'</pre>';


'#^\d+$#u'
'#^[7фя]+$#u'
'#[-a-zа-яё_\s]{4,15}#ui'
'#m[a-z]+x#ui'

foreach($array as &$v) {
	$v = preg_replace('#\s+#ui',' ', $v);
	if($v) {
		echo 'true';
	} else {
		echo 'false';
	}
	//echo '<pre>'.print_r($matches,1).'</pre>';
}
echo '<pre>'.print_r($array,1).'</pre>';

foreach($array as &$v) {
	$v = preg_match('#:(\d{1,2}\s\w{3,15}\s\d{2}:\d{2})#ui',$v, $matches);
	if($v) {
		echo 'true';
	} else {
		echo 'false';
	}
	echo '<pre>'.print_r($matches,1).'</pre>';
}

function hc ($el) { // HtmlSpecialCharsAll
	if(!is_array($el)) {
		$el = htmlspecialchars($el);
	} else {
		$el = array_map('hc', $el);
	}
	return $el;
}

foreach($array as &$v) {
	$v = preg_match('#<a\s*href\s*=\s*[\'\"]*([\w\.]+)[\'\"]*#ui',$v, $matches);
	if($v) {
		echo 'true';
	} else {
		echo 'false';
	}
	echo '<pre>'.print_r(hc($matches),1).'</pre>';
}

foreach($array as &$v) {
	$v = preg_match('#[\w-]+@[\w-]+.[\w]+#u',$v, $matches);
	if($v) {
		echo 'true';
	} else {
		echo 'false';
	}
	echo '<pre>'.print_r($matches,1).'</pre>';
}
 */